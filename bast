using UnityEngine;
using UnityEditor;
using System.Collections.Generic;
using Unity.EditorCoroutines.Editor;

public class AsyncBarycentricMeshGenerator : EditorWindow
{
    private Mesh sourceMesh;
    private string newMeshName = "BarycentricMesh";
    private bool preserveUVs = true;
    private bool preserveNormals = true;
    private int stepSize = 1000;

    [MenuItem("Tools/Async Barycentric Mesh Generator")]
    public static void ShowWindow()
    {
        GetWindow<AsyncBarycentricMeshGenerator>("Async Barycentric Mesh Generator");
    }

    void OnGUI()
    {
        GUILayout.Label("Barycentric Mesh Generator", EditorStyles.boldLabel);
        sourceMesh = (Mesh)EditorGUILayout.ObjectField("Source Mesh", sourceMesh, typeof(Mesh), false);
        newMeshName = EditorGUILayout.TextField("New Mesh Name", newMeshName);
        preserveUVs = EditorGUILayout.Toggle("Preserve UVs", preserveUVs);
        preserveNormals = EditorGUILayout.Toggle("Preserve Normals", preserveNormals);

        if (GUILayout.Button("Generate Asynchronously"))
        {
            if (sourceMesh == null)
            {
                EditorUtility.DisplayDialog("Error", "Please assign a source mesh.", "OK");
                return;
            }

            EditorCoroutineUtility.StartCoroutineOwnerless(GenerateAsync());
        }
    }

    System.Collections.IEnumerator GenerateAsync()
    {
        int[] triangles = sourceMesh.triangles;
        Vector3[] vertices = sourceMesh.vertices;
        Vector2[] uvs = preserveUVs && sourceMesh.uv.Length == vertices.Length ? sourceMesh.uv : null;
        Vector3[] normals = preserveNormals && sourceMesh.normals.Length == vertices.Length ? sourceMesh.normals : null;

        List<Vector3> newVerts = new List<Vector3>(triangles.Length);
        List<Color> newColors = new List<Color>(triangles.Length);
        List<Vector2> newUVs = uvs != null ? new List<Vector2>(triangles.Length) : null;
        List<Vector3> newNormals = normals != null ? new List<Vector3>(triangles.Length) : null;
        List<int> newIndices = new List<int>(triangles.Length);

        float totalTris = triangles.Length / 3f;

        for (int i = 0; i < triangles.Length; i += 3)
        {
            int t0 = triangles[i];
            int t1 = triangles[i + 1];
            int t2 = triangles[i + 2];

            Vector3 v0 = vertices[t0];
            Vector3 v1 = vertices[t1];
            Vector3 v2 = vertices[t2];

            newVerts.Add(v0);
            newVerts.Add(v1);
            newVerts.Add(v2);

            newColors.Add(Color.red);
            newColors.Add(Color.green);
            newColors.Add(Color.blue);

            if (uvs != null)
            {
                newUVs.Add(uvs[t0]);
                newUVs.Add(uvs[t1]);
                newUVs.Add(uvs[t2]);
            }

            if (normals != null)
            {
                newNormals.Add(normals[t0]);
                newNormals.Add(normals[t1]);
                newNormals.Add(normals[t2]);
            }

            int baseIndex = newVerts.Count - 3;
            newIndices.Add(baseIndex);
            newIndices.Add(baseIndex + 1);
            newIndices.Add(baseIndex + 2);

            if (i % (stepSize * 3) == 0)
            {
                float progress = i / (float)triangles.Length;
                EditorUtility.DisplayProgressBar("Generating Barycentric Mesh", $"Triangle {(i / 3)} of {(int)totalTris}", progress);
                yield return null;
            }
        }

        EditorUtility.ClearProgressBar();

        Mesh baryMesh = new Mesh();
        baryMesh.name = newMeshName;
        baryMesh.SetVertices(newVerts);
        baryMesh.SetColors(newColors);
        baryMesh.SetTriangles(newIndices, 0);

        if (uvs != null) baryMesh.SetUVs(0, newUVs);
        if (normals != null) baryMesh.SetNormals(newNormals);

        baryMesh.RecalculateBounds();
        baryMesh.RecalculateTangents();

        string savePath = EditorUtility.SaveFilePanelInProject("Save Barycentric Mesh", newMeshName, "asset", "Choose save location");
        if (!string.IsNullOrEmpty(savePath))
        {
            AssetDatabase.CreateAsset(baryMesh, savePath);
            AssetDatabase.SaveAssets();
            EditorUtility.DisplayDialog("Success", "Mesh saved successfully!", "OK");
        }
    }
}